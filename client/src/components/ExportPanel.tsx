import { useState } from "react";
import { Card } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { 
  Download, Copy, Share2, FileText, 
  Calendar, Clock, CheckCircle 
} from "lucide-react";

export interface ExportData {
  totalSavings: number;
  totalEcoPoints: number;
  schedules: Array<{
    appliance: string;
    originalTime: number;
    recommendedTime: number;
    savings: number;
    ecoPoints: number;
  }>;
  summary: string;
}

interface ExportPanelProps {
  data: ExportData;
  onClose: () => void;
}

export default function ExportPanel({ data, onClose }: ExportPanelProps) {
  const [activeTab, setActiveTab] = useState<'summary' | 'csv' | 'json'>('summary');
  const [copied, setCopied] = useState(false);

  const formatTime = (hour: number) => {
    if (hour === 0) return "12:00 AM";
    if (hour < 12) return `${hour}:00 AM`;
    if (hour === 12) return "12:00 PM";
    return `${hour - 12}:00 PM`;
  };

  const generateSummaryText = () => {
    const date = new Date().toLocaleDateString();
    let summary = `🌱 EcoShift Plan - ${date}\n\n`;
    summary += `💰 Total Savings: $${data.totalSavings.toFixed(2)}\n`;
    summary += `🍃 EcoPoints Earned: +${data.totalEcoPoints}\n\n`;
    summary += `📅 Recommended Schedule:\n`;
    
    data.schedules.forEach(schedule => {
      summary += `• ${schedule.appliance}: ${formatTime(schedule.originalTime)} → ${formatTime(schedule.recommendedTime)} (+$${schedule.savings.toFixed(2)}, +${schedule.ecoPoints} pts)\n`;
    });
    
    summary += `\n${data.summary}\n\n`;
    summary += `Generated by EcoShift - Power Your Savings, Protect Our Planet`;
    
    return summary;
  };

  const generateCSV = () => {
    let csv = "Appliance,Original Time,Recommended Time,Savings ($),EcoPoints\n";
    data.schedules.forEach(schedule => {
      csv += `"${schedule.appliance}","${formatTime(schedule.originalTime)}","${formatTime(schedule.recommendedTime)}",${schedule.savings.toFixed(2)},${schedule.ecoPoints}\n`;
    });
    return csv;
  };

  const generateJSON = () => {
    return JSON.stringify({
      exportDate: new Date().toISOString(),
      totalSavings: data.totalSavings,
      totalEcoPoints: data.totalEcoPoints,
      schedules: data.schedules.map(schedule => ({
        ...schedule,
        originalTimeFormatted: formatTime(schedule.originalTime),
        recommendedTimeFormatted: formatTime(schedule.recommendedTime)
      })),
      summary: data.summary
    }, null, 2);
  };

  const getExportContent = () => {
    switch (activeTab) {
      case 'summary': return generateSummaryText();
      case 'csv': return generateCSV();
      case 'json': return generateJSON();
      default: return generateSummaryText();
    }
  };

  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(getExportContent());
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  const handleDownload = () => {
    const content = getExportContent();
    const mimeType = activeTab === 'csv' ? 'text/csv' : activeTab === 'json' ? 'application/json' : 'text/plain';
    const filename = `ecoshift-plan-${new Date().toISOString().split('T')[0]}.${activeTab === 'summary' ? 'txt' : activeTab}`;
    
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const handleShare = async () => {
    const content = generateSummaryText();
    
    if (navigator.share) {
      try {
        await navigator.share({
          title: 'My EcoShift Plan',
          text: content
        });
      } catch (err) {
        console.error('Share failed:', err);
      }
    } else {
      // Fallback to copy
      handleCopy();
    }
  };

  return (
    <div className="fixed inset-0 bg-background/80 backdrop-blur-sm flex items-center justify-center p-4 z-50">
      <Card className="w-full max-w-4xl max-h-[90vh] overflow-hidden">
        <div className="p-6 border-b border-border">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-xl font-semibold">Export Your EcoShift Plan</h3>
              <p className="text-muted-foreground text-sm mt-1">
                Share your savings plan or save it for future reference
              </p>
            </div>
            <Button 
              variant="ghost" 
              size="sm" 
              onClick={onClose}
              data-testid="button-close-export"
            >
              ✕
            </Button>
          </div>
        </div>

        <div className="p-6 space-y-6">
          {/* Format Tabs */}
          <div className="flex space-x-2">
            <Button
              variant={activeTab === 'summary' ? 'default' : 'outline'}
              size="sm"
              onClick={() => setActiveTab('summary')}
              data-testid="tab-summary"
            >
              <FileText className="w-4 h-4 mr-2" />
              Summary
            </Button>
            <Button
              variant={activeTab === 'csv' ? 'default' : 'outline'}
              size="sm"
              onClick={() => setActiveTab('csv')}
              data-testid="tab-csv"
            >
              <Calendar className="w-4 h-4 mr-2" />
              CSV
            </Button>
            <Button
              variant={activeTab === 'json' ? 'default' : 'outline'}
              size="sm"
              onClick={() => setActiveTab('json')}
              data-testid="tab-json"
            >
              <Clock className="w-4 h-4 mr-2" />
              JSON
            </Button>
          </div>

          {/* Export Content */}
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <Badge variant="secondary" className="text-sm">
                {activeTab.toUpperCase()} Format
              </Badge>
              <div className="flex space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleCopy}
                  data-testid="button-copy"
                >
                  {copied ? (
                    <>
                      <CheckCircle className="w-4 h-4 mr-2" />
                      Copied!
                    </>
                  ) : (
                    <>
                      <Copy className="w-4 h-4 mr-2" />
                      Copy
                    </>
                  )}
                </Button>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={handleShare}
                  data-testid="button-share"
                >
                  <Share2 className="w-4 h-4 mr-2" />
                  Share
                </Button>
                <Button
                  size="sm"
                  onClick={handleDownload}
                  data-testid="button-download"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Download
                </Button>
              </div>
            </div>

            <Textarea
              value={getExportContent()}
              readOnly
              className="min-h-[400px] font-mono text-sm"
              data-testid="textarea-export-content"
            />
          </div>

          {/* Quick Actions */}
          <Separator />
          <div className="flex justify-between items-center">
            <p className="text-sm text-muted-foreground">
              Your plan includes {data.schedules.length} optimized appliances
            </p>
            <div className="flex space-x-2">
              <Button 
                variant="outline" 
                onClick={onClose}
                data-testid="button-done"
              >
                Done
              </Button>
            </div>
          </div>
        </div>
      </Card>
    </div>
  );
}