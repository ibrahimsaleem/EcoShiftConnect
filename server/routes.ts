import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { EcoShiftOptimizer } from "./optimization";
import { generateEcoShiftRecommendation } from "./gemini";
import { 
  optimizationRequestSchema, 
  aiRecommendationRequestSchema 
} from "@shared/schema";
import { randomUUID } from "crypto";

export async function registerRoutes(app: Express): Promise<Server> {
  const optimizer = new EcoShiftOptimizer();

  // Get eco bands data
  app.get("/api/eco-bands", (req, res) => {
    try {
      const ecoBands = optimizer.getEcoBands();
      res.json(ecoBands);
    } catch (error) {
      console.error("Error fetching eco bands:", error);
      res.status(500).json({ error: "Failed to fetch eco bands data" });
    }
  });

  // Optimize appliance schedule
  app.post("/api/optimize", async (req, res) => {
    try {
      const validatedRequest = optimizationRequestSchema.parse(req.body);
      const optimizationResult = optimizer.optimizeAppliances(
        validatedRequest.appliances,
        validatedRequest.preferences
      );
      
      // Store result for potential future reference
      const resultId = randomUUID();
      await storage.storeOptimizationResult(resultId, optimizationResult);
      
      res.json({
        id: resultId,
        ...optimizationResult
      });
    } catch (error) {
      console.error("Error optimizing appliances:", error);
      res.status(400).json({ 
        error: "Failed to optimize appliances",
        details: error instanceof Error ? error.message : "Unknown error"
      });
    }
  });

  // Get AI-powered recommendation
  app.post("/api/recommend", async (req, res) => {
    try {
      const validatedRequest = aiRecommendationRequestSchema.parse(req.body);
      const recommendation = await generateEcoShiftRecommendation(
        validatedRequest.optimizationSummary,
        validatedRequest.userContext
      );
      
      res.json({ recommendation });
    } catch (error) {
      console.error("Error generating AI recommendation:", error);
      res.status(500).json({ 
        error: "Failed to generate recommendation",
        details: error instanceof Error ? error.message : "Unknown error"
      });
    }
  });

  // Export optimization result
  app.post("/api/export", async (req, res) => {
    try {
      const { format = 'json', optimizationSummary } = req.body;
      
      if (!optimizationSummary) {
        return res.status(400).json({ error: "Optimization summary required" });
      }

      const date = new Date().toISOString().split('T')[0];
      
      if (format === 'csv') {
        let csv = "Appliance,Original Time,Recommended Time,Savings ($),EcoPoints\n";
        optimizationSummary.schedules.forEach((schedule: any) => {
          const formatTime = (hour: number) => {
            if (hour === 0) return "12:00 AM";
            if (hour < 12) return `${hour}:00 AM`;
            if (hour === 12) return "12:00 PM";
            return `${hour - 12}:00 PM`;
          };
          
          csv += `"${schedule.appliance}","${formatTime(schedule.originalTime)}","${formatTime(schedule.recommendedTime)}",${schedule.savings.toFixed(2)},${schedule.ecoPoints}\n`;
        });
        
        res.setHeader('Content-Type', 'text/csv');
        res.setHeader('Content-Disposition', `attachment; filename=ecoshift-plan-${date}.csv`);
        res.send(csv);
      } else if (format === 'text') {
        const formatTime = (hour: number) => {
          if (hour === 0) return "12:00 AM";
          if (hour < 12) return `${hour}:00 AM`;
          if (hour === 12) return "12:00 PM";
          return `${hour - 12}:00 PM`;
        };
        
        let summary = `🌱 EcoShift Plan - ${new Date().toLocaleDateString()}\n\n`;
        summary += `💰 Total Savings: $${optimizationSummary.totalSavings.toFixed(2)}\n`;
        summary += `🍃 EcoPoints Earned: +${optimizationSummary.totalEcoPoints}\n\n`;
        summary += `📅 Recommended Schedule:\n`;
        
        optimizationSummary.schedules.forEach((schedule: any) => {
          summary += `• ${schedule.appliance}: ${formatTime(schedule.originalTime)} → ${formatTime(schedule.recommendedTime)} (+$${schedule.savings.toFixed(2)}, +${schedule.ecoPoints} pts)\n`;
        });
        
        summary += `\nBy shifting your appliances to greener hours, you're supporting renewable energy and reducing grid stress during peak demand periods. Every shifted hour is a step toward a greener future!\n\n`;
        summary += `Generated by EcoShift - Power Your Savings, Protect Our Planet`;
        
        res.setHeader('Content-Type', 'text/plain');
        res.setHeader('Content-Disposition', `attachment; filename=ecoshift-plan-${date}.txt`);
        res.send(summary);
      } else {
        // JSON format
        const exportData = {
          exportDate: new Date().toISOString(),
          ...optimizationSummary
        };
        
        res.setHeader('Content-Type', 'application/json');
        res.setHeader('Content-Disposition', `attachment; filename=ecoshift-plan-${date}.json`);
        res.json(exportData);
      }
    } catch (error) {
      console.error("Error exporting data:", error);
      res.status(500).json({ 
        error: "Failed to export data",
        details: error instanceof Error ? error.message : "Unknown error"
      });
    }
  });

  // Health check endpoint
  app.get("/api/health", (req, res) => {
    res.json({ 
      status: "healthy", 
      timestamp: new Date().toISOString(),
      service: "EcoShift API"
    });
  });

  const httpServer = createServer(app);
  return httpServer;
}